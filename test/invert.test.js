const { invertPhrase, invertObjectNode } = require('../src/invert');

/**
 * Recursively performs `Object.freeze` on the entire object
 * Useful to prevent unexpected mutations on the object
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
 */
function deepFreeze(object) {
  // Retrieve the property names defined on object
  const propNames = Object.getOwnPropertyNames(object);

  // Freeze properties before freezing self
  for (const name of propNames) {
    const value = object[name];
    if (value && typeof value === 'object') {
      deepFreeze(value);
    }
  }

  return Object.freeze(object);
}

describe('invertPhrase utility', () => {
  test('invertPhrase utility inverts all test phrases correctly', () => {
    const phrases = [
      'the quick brown fox jumps over the lazy dog.',
      'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.',
      '9876543210',
      'Random %^&* Characters !@#$ in ()_+,./- between',
      '(parentheses) [brackets] {braces}'
    ];
    const expected = [
      '.∆Éop  éz…ê Ö «ù…• á …π«ù åo sd…Øn…æ xo‚Öé u ço…πq  û…î·¥ânb «ù…• á',
      '.‚ÖÅO·ó° ‚ÖÑZ‚àÄ‚ÖÇ ∆éHÍìï Íì§∆é…ÖO S‘ÄW’à·íã XO·ñµ NMOÍì§Íì≠ ÍìòœΩI’àÍùπ ∆éHÍìï',
      '0‚áÇ‚Üä‚Üãh59ùòì86',
      'u«ù«ù ç á«ùq -/.,+_() u·¥â $#@! s…π«ù á…î…ê…π…ê…•œΩ *&^% …Øopu…êÍì§',
      '{s«ù…î…ê…πq} [s á«ù û…î…ê…πq] (s«ùs«ù…• áu«ù…π…êd)'
    ];

    const inverted = phrases.map(p => invertPhrase(p));
    expect(inverted).toEqual(expected);
  });
});

describe('invertObjectNode utility', () => {
  test('invertObjectNode inverts all leaf-level texts without mutating the input', () => {
    // Using deepFreeze to test for mutations
    const input = deepFreeze({
      a: [false, 120],
      b: {
        c: ['the', 'quick', 'brown'],
        d: {
          e: ['fox', 'jumps'],
          f: 'over'
        }
      },
      g: [['the', 'lazy'], { h: 'dog' }]
    });

    expect(invertObjectNode(input)).toEqual({
      a: [false, 120], // Should be unchanged
      b: {
        c: ['«ù…• á', ' û…î·¥ânb', 'u ço…πq'],
        d: {
          e: ['xo‚Öé', 'sd…Øn…æ'],
          f: '…π«ù åo'
        }
      },
      g: [['«ù…• á', ' éz…ê Ö'], { h: '∆Éop' }]
    });
  });
});
